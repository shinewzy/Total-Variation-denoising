#include<opencv2\opencv.hpp>
#include<opencv2/core/core.hpp>
#include<opencv2/highgui/highgui.hpp>
#include "highgui.h"
#include "cv.h"
#include "opencv2/core/core_c.h"
#include "opencv2/core/core.hpp"
#include "opencv2/flann/miniflann.hpp"
#include "opencv2/imgproc/imgproc_c.h"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/photo/photo.hpp"
#include "opencv2/video/video.hpp"
#include "opencv2/features2d/features2d.hpp"
#include "opencv2/objdetect/objdetect.hpp"
#include "opencv2/calib3d/calib3d.hpp"
#include "opencv2/ml/ml.hpp"
#include "opencv2/highgui/highgui_c.h"
#include "opencv2/highgui/highgui.hpp"
using namespace cv;
   
double** newDoubleMatrix(int nx, int ny) 
 {      double** matrix = new double*[ny]; 
    for(int i = 0; i < ny; i++)    
	{         
		matrix[i] = new double[nx];     }     
	if(!matrix)         return NULL;    
	return         matrix; 
 }

bool deleteDoubleMatrix(double** matrix, int nx, int ny)
{
    if (!matrix)
    {
       return true;
    }
    for (int i = 0; i < ny; i++)
    {
        if (matrix[i])
        {
            delete[] matrix[i];
        }
    }
    delete[] matrix;

    return true;
}

int main()
{
  Mat img=imread("M:\\58&59\\59.tif",0);//图片必须添加到工程目录下
  int ep = 1;  
    int nx=img.cols;  
    int ny = img.rows;  
    double dt = 0.25f;  
    double lam = 2;  
    int ep2 = ep*ep;
 
 

 double** image = newDoubleMatrix(nx, ny);  
 double** image0 = newDoubleMatrix(nx, ny);  
  
    for(int i=0;i<ny;i++)
	{  
        uchar* p=img.ptr<uchar>(i);  
        for(int j=0;j<nx;j++)
		{  
            image0[i][j]=image[i][j]=(double)p[j];  
        }  
    }
	 
	 int iter=110;
	 for (int t = 1; t <= iter; t++)
	 {  
 
		  for (int i = 0; i < ny; i++)
		  {  
            for (int j = 0; j < nx; j++)
			{  
                int tmp_i1=(i+1)<ny ? (i+1) :(ny-1);  
                int tmp_j1=(j+1)<nx ? (j+1): (nx-1);  
                int tmp_i2=(i-1) > -1 ? (i-1) : 0;  
                int tmp_j2=(j-1) > -1 ? (j-1) : 0;  
                double tmp_x = (image[i][tmp_j1] - image[i][tmp_j2])/2;
				double tmp_y= (image[tmp_i1][j]-image[tmp_i2][j])/2;
				double tmp_xx = image[i][tmp_j1] + image[i][tmp_j2]- image[i][j]*2;
				double tmp_yy= image[tmp_i1][j]+image[tmp_i2][j] - image[i][j]*2;
				double tmp_dp=image[tmp_i1][tmp_j1]+image[tmp_i2][tmp_j2];
			    double tmp_dm=image[tmp_i2][tmp_j1]+image[tmp_i1][tmp_j2]; 
			    double tmp_xy = (tmp_dp - tmp_dm)/4;
			    double tmp_num = tmp_xx*(tmp_y*tmp_y + ep2) - 2*tmp_x*tmp_y*tmp_xy +tmp_yy*(tmp_x*tmp_x + ep2); 
				double tmp_den= pow((tmp_x*tmp_x + tmp_y*tmp_y + ep2), 1.5);
				image[i][j] += dt*(tmp_num/tmp_den+ lam*(image0[i][j] - image[i][j]));  
            }  
		  }
	 }
  
   Mat new_img;  
   img.copyTo(new_img);  
    for(int i=0;i<img.rows;i++)
	{  
        uchar* p=img.ptr<uchar>(i);  
        uchar* np=new_img.ptr<uchar>(i);  
        for(int j=0;j<img.cols;j++)
		{  
            int tmp=(int)image[i][j];  
            tmp=max(0,min(tmp,255));  
            np[j]=(uchar)(tmp);  
        }  
	}

	deleteDoubleMatrix(image0, nx, ny);  
    deleteDoubleMatrix(image, nx, ny);  
   
	imwrite("D:\\Total Variation\\TV_dt=0.25_it=110.tif",new_img);

	 return 0;
	 }

